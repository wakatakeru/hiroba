// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/content_repository.go

// Package usecase is a generated GoMock package.
package usecase

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/wakatakeru/hiroba-content-api/domain"
	reflect "reflect"
)

// MockContentRepository is a mock of ContentRepository interface.
type MockContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryMockRecorder
}

// MockContentRepositoryMockRecorder is the mock recorder for MockContentRepository.
type MockContentRepositoryMockRecorder struct {
	mock *MockContentRepository
}

// NewMockContentRepository creates a new mock instance.
func NewMockContentRepository(ctrl *gomock.Controller) *MockContentRepository {
	mock := &MockContentRepository{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepository) EXPECT() *MockContentRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockContentRepository) Store(arg0 domain.Content) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockContentRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockContentRepository)(nil).Store), arg0)
}

// Update mocks base method.
func (m *MockContentRepository) Update(arg0 domain.Content) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockContentRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContentRepository)(nil).Update), arg0)
}

// FindByID mocks base method.
func (m *MockContentRepository) FindByID(arg0 int) (domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockContentRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockContentRepository)(nil).FindByID), arg0)
}

// FindBySiteID mocks base method.
func (m *MockContentRepository) FindBySiteID(arg0 int) (domain.Contents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySiteID", arg0)
	ret0, _ := ret[0].(domain.Contents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySiteID indicates an expected call of FindBySiteID.
func (mr *MockContentRepositoryMockRecorder) FindBySiteID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySiteID", reflect.TypeOf((*MockContentRepository)(nil).FindBySiteID), arg0)
}

// FindByUserID mocks base method.
func (m *MockContentRepository) FindByUserID(arg0 int) (domain.Contents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0)
	ret0, _ := ret[0].(domain.Contents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockContentRepositoryMockRecorder) FindByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockContentRepository)(nil).FindByUserID), arg0)
}
